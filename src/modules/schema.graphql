type Query {
  messages: [Message!]!
    getUsers: [User!]!
  getUserById(id: ID!): User

   getPosts(page: Int, limit: Int, sortBy: String, sortOrder: String): PaginatedPosts!
  getPostById(id: ID!): Post
   getPostsByUserId(userId: ID!, page: Int, limit: Int, sortBy: String, sortOrder: String): PaginatedPosts!

    getComments(page: Int, limit: Int, sortBy: String, sortOrder: String): PaginatedComments!
    getCommentsByPostId(postId: ID!, page: Int, limit: Int, sortBy: String, sortOrder: String): PaginatedComments!

  getUserByComment(commentId: ID!): User
  getAuthorOfPost(postId: ID!): User
  getUsers2:[User2]
  getUsersById2(id:ID!):userResult!
  chatUsers: [ChatUser!]!
  chatMessages: [ChatMessage!]!
  allMessages: [ChatMessage!]!
  
}

type Mutation {
  postMessage(content: String!, author: String!, title: String!): Message!
  createPost(title: String, content: String, authorId: ID,commentId:ID): Post
  updateUser(userId: ID!, newInfo: UpdateUserInput!): User!
  deleteComment(commentId: ID!): Boolean!
  createComment(postId:ID!, content:String, authorId:ID!): Comment!
  register(username: String!, password: String!): ChatUser!
  login(username: String!, password: String!): AuthPayload!
  logout: LogoutResponse!
  sendMessage(content: String!): ChatMessage!
  
}

type Subscription {
  messagePosted: Message!
  commentAdded: Comment!
  userStatusChanged: ChatUser!
}

input CommentInput {
  id: ID!
  text: String!
  postId: ID!
  userId: ID!
}

input PostInput {
  id: ID!
  title: String!
  content: String!
  authorId: ID!
}

input UpdateUserInput {
  username: String
  email: String
  password: String
}
